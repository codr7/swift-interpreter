(load (merge-pathnames "utils.lisp" *load-truename*))

(defvar parts (make-hash-table :test 'equal))

(defun decode-row (in row)
  (dotimes (col (length in))
    (let ((c (char in col)))
      (if (digit-char-p c)
	  (multiple-value-bind (n i) (parse-integer in :start col :junk-allowed t)
	    (setf (gethash (cons row col) parts) n)
	    (setf col (1- i)))
	  (setf (gethash (cons row col) parts) (not (char= c #\.)))))))

(defun id? (r c)
  (let ((p (gethash (cons r c) parts)))
    (and p (not (numberp p)))))

(defun count-parts (path)
  (let ((i 0) out)
    (dolist (in (read-lines path))
      (decode-row in i)
      (incf i))
    (do-hash (k v parts)
      (tagbody
	 (when (numberp v)
	   (let ((r (first k))
		 (c (rest k)))
	     (let ((s (format nil "~a" v)))
	       (dotimes (ri 3)
		 (dotimes (ci (+ (length s) 2))
		   (when (id? (+ r (1- ri)) (+ c (1- ci)))
		     (push v out)
		     (go next)))))))
       next))
    (reduce #'+ out)))
