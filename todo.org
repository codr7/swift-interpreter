* add check macro from part6
** check [3] + 1 2

* add support for ref closures

function foo(x:Int):Function (
  function bar(y:Int):Int 
    x.+ y
  &bar
)
call foo 42 [3]

---

swift run -c release

function fib1(n:Int):Int 
  if n.< 2 n else (fib1 n.- 1).+ fib1 n.- 2 
benchmark 100 fib1 20

2.898292418 
3.940976014 arg type check
3.330264671 emit type check
3.15372856
3.083033574
1.922285964 stack arg
1.555371778 local pc
1.315566893

function fib2(n:Int a:Int b:Int):Int 
  if n.> 1 return fib2 n.- 1 b a.+ b else if n.= 0 a else b 
benchmark 10000 fib2 70 0 1

0.840631962 
1.174382059 arg type check
0.985196169 emit type check
0.912444318
0.899550548
0.679791056 stack arg
0.542982574 local pc
0.531509051
0.505010449

--

define foo + 1 2
evaluate + 1 2

--

function foo(x:Int):Int (
  function bar(y:Int):Int
    + x y
  bar 42
)
foo 3

--

function foo(x:Int):Function
  function(y:Int):Int 
    x.+ y

call foo 42 [3]
